generator client {
  provider = "prisma-client-js"
}

// DATABASE_URL
// DATABASE_DEPLOY

datasource db {
  provider = "mysql"
  url      = env("DATABASE_DEPLOY")
}

model User {
  id              Int     @id @default(autoincrement())
  counts          Int     @default(0)
  name            String
  picture         String  @default("https://docreader-novels.vercel.app/default-user.svg")
  username        String  @unique
  email           String  @unique
  followersCount  Int     @default(0)
  followingsCount Int     @default(0)
  novelsCount     Int @default(0)
  password        String?
  novels          Novel[]

  followings        Following[]       @relation("followersrel")
  sameUser          Following[]       @relation("usersx")
  followers         Follower[]        @relation("followingrel")
  sameUserFollowing Follower[]        @relation("usersfollowinguser")
  views             ChapterViews[]
  likes             ChapterLikes[]
  comments          ChapterComments[]
  posts             Post[]
  favouriteNovels   FavouriteNovel[]

  createdAt DateTime? @db.Timestamp()
  updatedAt DateTime? @updatedAt

  @@map("users")
}

model FavouriteNovel {
  id Int @id @default(autoincrement())

  userId Int
  novelId Int

  novel Novel @relation(fields: [novelId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  createdAt DateTime? @db.Timestamp()

  @@map("favourite_novels")
}

model Following {
  id          Int       @id @default(autoincrement())
  following   User      @relation("followersrel", fields: [followingId], references: [id])
  followingId Int
  user        User?     @relation("usersx", fields: [userId], references: [id])
  userId      Int?
  createdAt   DateTime?
  updatedAt   DateTime?

  @@map("followings")
}

model Follower {
  id         Int       @id @default(autoincrement())
  follower   User      @relation("followingrel", fields: [followerId], references: [id])
  followerId Int
  user       User?     @relation("usersfollowinguser", fields: [userId], references: [id])
  userId     Int?
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("followers")
}

model Novel {
  id          Int     @id @default(autoincrement())
  image       String
  title       String
  description String
  
  likesCount      Int     @default(0)
  viewsCount      Int     @default(0)
  chaptersCount   Int @default(0)

  userId     Int
  categoryId Int

  user            User              @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  category        Category          @relation(fields: [categoryId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  tags            NovelTag[]
  chapters        Chapter[]
  chapterViews    ChapterViews[]
  chapterLikes    ChapterLikes[]
  chapterComments ChapterComments[]
  favouriteByUsers FavouriteNovel[]
  
  createdAt DateTime? @db.Timestamp()
  updatedAt DateTime? @updatedAt

  @@map("novels")
}

model NovelTag {
  id Int @id @default(autoincrement())

  tag String
  novelId Int
  novel Novel @relation(fields: [novelId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@map("novel_tags")
}

model Chapter {
  id            Int               @id @default(autoincrement())
  title         String
  content       String @default("")
  likesCount    Int @default(0)
  viewsCount    Int @default(0)
  commentsCount Int @default(0)
  number        Int @default(1)
  novelId       Int
  novel         Novel             @relation(fields: [novelId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  views         ChapterViews[]
  likes         ChapterLikes[]
  comments      ChapterComments[]

  @@map("chapter")
}

model Category {
  id     Int     @id @default(autoincrement())
  name   String  @unique
  novels Novel[]

  @@map("categories")
}

model ChapterViews {
  id Int @id @default(autoincrement())

  userId    Int
  novelId   Int
  chapterId Int

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  novel   Novel   @relation(fields: [novelId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  chapter Chapter @relation(fields: [chapterId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@map("chapter_views")
}

model ChapterLikes {
  id        Int @id @default(autoincrement())
  userId    Int
  novelId   Int
  chapterId Int

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  novel   Novel   @relation(fields: [novelId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  chapter Chapter @relation(fields: [chapterId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@map("chapter_likes")
}

model ChapterComments {
  id      Int    @id @default(autoincrement())
  comment String

  userId    Int
  novelId   Int
  chapterId Int
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  novel     Novel   @relation(fields: [novelId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  chapter   Chapter @relation(fields: [chapterId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  createdAt DateTime? @db.Timestamp()
  updatedAt DateTime? @updatedAt

  @@map("chapter_comments")
}

model Post {
  id      Int    @id @default(autoincrement())
  content String @db.LongText

  userId Int
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  createdAt DateTime? @db.Timestamp()
  updatedAt DateTime? @updatedAt

  @@map("posts")
}
